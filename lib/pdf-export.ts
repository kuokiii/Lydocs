export class PDFExporter {
  static async exportToPDF(content: string, filename: string, signatureFields: any[] = []): Promise<string> {
    try {
      // Dynamically import jsPDF and html2canvas
      const { jsPDF } = await import("jspdf")
      const html2canvas = (await import("html2canvas")).default

      // Create a temporary div to render the HTML content for PDF generation
      const tempDiv = document.createElement("div")
      tempDiv.style.width = "8.5in" // Standard letter size width
      tempDiv.style.padding = "0.5in" // Add some padding
      tempDiv.style.background = "white" // Ensure white background for rendering
      tempDiv.style.position = "relative" // Needed for absolute positioning of fields
      tempDiv.style.boxSizing = "border-box" // Include padding in width/height

      // Base HTML content
      const innerHtmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>${filename}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              line-height: 1.6;
              color: #333;
            }
            h1 {
              text-align: center;
              font-size: 24px;
              margin-bottom: 10px;
            }
            .subtitle {
              text-align: center;
              color: #666;
              margin-bottom: 30px;
            }
            .content {
              white-space: pre-wrap;
              margin-bottom: 40px;
            }
            .signature-section {
              display: flex;
              justify-content: space-between;
              margin-top: 60px;
            }
            .signature-box {
              width: 45%;
              text-align: center;
            }
            .signature-line {
              border-bottom: 1px solid #333;
              margin: 20px 0 10px 0;
              height: 40px;
            }
            .pdf-field {
                position: absolute;
                border: 1px solid #ccc;
                background-color: rgba(255, 255, 255, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 10px;
                color: #333;
                overflow: hidden;
                box-sizing: border-box;
            }
            .pdf-field img {
                max-width: 100%;
                max-height: 100%;
                object-fit: contain;
            }
          </style>
        </head>
        <body>
          <h1>SERVICE AGREEMENT</h1>
          <div class="subtitle">Generated by Lydocs AI</div>
          <div class="content">${content.replace(/\n/g, "<br>")}</div>
          <div class="signature-section">
            <div class="signature-box">
              <h3>Service Provider</h3>
              <div class="signature-line"></div>
              <p>Signature</p>
              <div class="signature-line"></div>
              <p>Date</p>
            </div>
            <div class="signature-box">
              <h3>Client</h3>
              <div class="signature-line"></div>
              <p>Signature</p>
              <div class="signature-line"></div>
              <p>Date</p>
            </div>
          </div>
        </body>
        </html>
      `
      tempDiv.innerHTML = innerHtmlContent

      // Add signature fields to the temporary div
      signatureFields.forEach((field) => {
        const fieldElement = document.createElement("div")
        fieldElement.className = "pdf-field"
        fieldElement.style.left = `${field.x}px`
        fieldElement.style.top = `${field.y}px`
        fieldElement.style.width = `${field.width}px`
        fieldElement.style.height = `${field.height}px`
        fieldElement.style.borderColor = field.signer === "Service Provider" ? "#3b82f6" : "#22c55e" // Blue for SP, Green for Client

        if (field.filled && field.signatureData) {
          if (field.type === "signature" || field.type === "initial") {
            const img = document.createElement("img")
            img.src = field.signatureData
            fieldElement.appendChild(img)
          } else if (field.type === "date" || field.type === "text") {
            fieldElement.textContent = field.signatureData
            fieldElement.style.fontSize = "12px"
            fieldElement.style.fontWeight = "bold"
          }
        } else {
          fieldElement.textContent = `[${field.label} - ${field.signer}]`
          fieldElement.style.borderStyle = "dashed"
          fieldElement.style.backgroundColor =
            field.signer === "Service Provider" ? "rgba(59, 130, 246, 0.1)" : "rgba(34, 197, 94, 0.1)"
        }
        tempDiv.appendChild(fieldElement)
      })

      document.body.appendChild(tempDiv) // Append to DOM for html2canvas to work

      // Render the HTML content to a canvas
      const canvas = await html2canvas(tempDiv, {
        scale: 2, // Increase scale for better resolution
        useCORS: true, // Enable CORS for images if any
        logging: false, // Disable logging for cleaner console
      })

      // Remove the temporary div
      document.body.removeChild(tempDiv)

      const imgData = canvas.toDataURL("image/jpeg", 1.0) // Get image data from canvas

      const pdf = new jsPDF({
        orientation: "portrait",
        unit: "in",
        format: "letter",
      })

      const imgWidth = 8.5 // Letter size width
      const pageHeight = 11 // Letter size height
      const imgHeight = (canvas.height * imgWidth) / canvas.width

      let heightLeft = imgHeight
      let position = 0

      pdf.addImage(imgData, "JPEG", 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight
        pdf.addPage()
        pdf.addImage(imgData, "JPEG", 0, position, imgWidth, imgHeight)
        heightLeft -= pageHeight
      }

      return pdf.output("datauristring") // Return as data URI string
    } catch (error) {
      console.error("PDF export failed:", error)
      throw new Error("Failed to generate PDF for attachment.")
    }
  }
}
